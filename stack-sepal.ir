{:package "stack-editor",
 :files {"updater.router" {:ns ["ns" "stack-editor.updater.router"],
                           :defs {"toggle-palette" ["defn"
                                                    "toggle-palette"
                                                    ["store" "op-data" "op-id"]
                                                    ["update-in" "store" ["[]" ":router" ":show-palette?"] "not"]],
                                  "route" ["defn"
                                           "route"
                                           ["store" "op-data"]
                                           ["let" [["router" "op-data"]] ["assoc" "store" ":router" "router"]]]},
                           :procs []},
         "comp.loading" {:ns ["ns"
                              "stack-editor.comp.loading"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                               ["[]" "respo-ui.style" ":as" "ui"]]],
                         :defs {"render" ["defn"
                                          "render"
                                          ["store"]
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["div"
                                            ["{}" [":style" ["merge" "ui/fullscreen" "ui/row-center" "style-loading"]]]
                                            ["comp-text" "|Loading..." "nil"]]]],
                                "comp-loading" ["def" "comp-loading" ["create-comp" ":loading" "render"]],
                                "style-loading" ["def"
                                                 "style-loading"
                                                 ["{}"
                                                  [":background-color" ["hsl" "200" "40" "10"]]
                                                  [":justify-content" "|center"]
                                                  [":color" ["hsl" "0" "0" "80"]]
                                                  [":font-size" "|32px"]
                                                  [":font-weight" "|100"]
                                                  [":font-family" "|Josefin Sans"]]]},
                         :procs []},
         "comp.command" {:ns ["ns"
                              "stack-editor.comp.command"
                              [":require"
                               ["[]" "clojure.string" ":as" "string"]
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]],
                         :defs {"render" ["defn"
                                          "render"
                                          ["command" "selected?" "on-select"]
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["div"
                                            ["{}"
                                             [":style"
                                              ["merge"
                                               "style-command"
                                               ["if" "selected?" ["{}" [":background-color" ["hsl" "0" "0" "30"]]]]]]
                                             [":event" ["{}" [":click" ["on-click" "on-select"]]]]]
                                            ["comp-text" ["string/join" "| " "command"] "nil"]]]],
                                "style-command" ["def"
                                                 "style-command"
                                                 ["{}"
                                                  [":backgroud-color" ["hsl" "0" "0" "0"]]
                                                  [":padding" "|0 8px"]
                                                  [":line-height" "2.4"]
                                                  [":font-family" "|Source Code Pro, Menlo,monospace"]
                                                  [":cursor" "|pointer"]]],
                                "on-click" ["defn"
                                            "on-click"
                                            ["on-select"]
                                            ["fn" ["e" "dispatch!"] ["on-select" "dispatch!"]]],
                                "comp-command" ["def" "comp-command" ["create-comp" ":command" "render"]]},
                         :procs []},
         "util.keycode" {:ns ["ns" "stack-editor.util.keycode"],
                         :defs {"key-esc" ["def" "key-esc" "27"],
                                "key-u" ["def" "key-u" "85"],
                                "key-down" ["def" "key-down" "40"],
                                "key-s" ["def" "key-s" "83"],
                                "key-d" ["def" "key-d" "68"],
                                "key-j" ["def" "key-j" "74"],
                                "key-a" ["def" "key-a" "65"],
                                "key-k" ["def" "key-k" "75"],
                                "key-p" ["def" "key-p" "80"],
                                "key-enter" ["def" "key-enter" "13"],
                                "key-b" ["def" "key-b" "66"],
                                "key-up" ["def" "key-up" "38"],
                                "key-e" ["def" "key-e" "69"]},
                         :procs []},
         "updater.stack" {:ns ["ns"
                               "stack-editor.updater.stack"
                               [":require"
                                ["[]" "clojure.string" ":as" "string"]
                                ["[]"
                                 "stack-editor.util.analyze"
                                 ":refer"
                                 ["[]" "locate-ns" "compute-ns" "list-dependent-ns"]]
                                ["[]"
                                 "stack-editor.util.detect"
                                 ":refer"
                                 ["[]" "strip-atom" "contains-def?" "tree-contains?"]]
                                ["[]" "stack-editor.util" ":refer" ["[]" "remove-idx"]]]],
                          :defs {"collapse" ["defn"
                                             "collapse"
                                             ["store" "op-data" "op-id"]
                                             ["let"
                                              [["cursor" "op-data"]]
                                              ["update"
                                               "store"
                                               ":writer"
                                               ["fn"
                                                ["writer"]
                                                ["->"
                                                 "writer"
                                                 ["assoc" ":pointer" "0"]
                                                 ["update" ":stack" ["fn" ["stack"] ["subvec" "stack" "cursor"]]]]]]]],
                                 "goto-definition" ["defn"
                                                    "goto-definition"
                                                    ["store" "op-data" "op-id"]
                                                    ["let"
                                                     [["forced?" "op-data"]
                                                      ["writer" [":writer" "store"]]
                                                      ["pointer" [":pointer" "writer"]]
                                                      ["focus" [":focus" "writer"]]
                                                      ["stack" [":stack" "writer"]]
                                                      ["pointer" [":pointer" "writer"]]
                                                      ["pkg" ["get-in" "store" ["[]" ":collection" ":package"]]]
                                                      ["files" ["get-in" "store" ["[]" ":collection" ":files"]]]
                                                      ["code-path" ["get" "stack" "pointer"]]
                                                      [["[]" "current-ns" "kind" "extra-name"] "code-path"]
                                                      ["drop-pkg"
                                                       ["fn"
                                                        ["x"]
                                                        ["if"
                                                         ["string?" "x"]
                                                         ["string/replace" "x" ["str" "pkg" "|."] "|"]
                                                         "x"]]]]
                                                     ["let"
                                                      [["target"
                                                        ["get-in"
                                                         "store"
                                                         ["concat" ["[]" ":collection" ":files"] "code-path" "focus"]]]]
                                                      ["if"
                                                       ["string?" "target"]
                                                       ["let"
                                                        [["stripped-target" ["strip-atom" "target"]]]
                                                        ["if"
                                                         "forced?"
                                                         ["if"
                                                          ["string/includes?" "stripped-target" "|/"]
                                                          ["let"
                                                           [[["[]" "ns-part" "var-part"]
                                                             ["string/split" "stripped-target" "|/"]]
                                                            ["that-ns"
                                                             ["drop-pkg" ["locate-ns" "ns-part" "current-ns" "files"]]]]
                                                           ["if"
                                                            ["contains?" "files" "that-ns"]
                                                            ["if"
                                                             ["contains-def?" "files" "that-ns" "var-part"]
                                                             ["update"
                                                              "store"
                                                              ":writer"
                                                              ["helper-put-path" "that-ns" "var-part"]]
                                                             ["->"
                                                              "store"
                                                              ["update-in"
                                                               ["[]" ":collection" ":files"]
                                                               ["helper-create-def"
                                                                "that-ns"
                                                                "var-part"
                                                                "code-path"
                                                                "focus"]]
                                                              ["update"
                                                               ":writer"
                                                               ["helper-put-path" "that-ns" "var-part"]]]]
                                                            ["->"
                                                             "store"
                                                             ["update"
                                                              ":notifications"
                                                              ["helper-notify"
                                                               "op-id"
                                                               ["str" "|foreign namespace: " "that-ns"]]]]]]
                                                          ["let"
                                                           [["ns-part"
                                                             ["compute-ns" "stripped-target" "current-ns" "files"]]
                                                            ["that-ns"
                                                             ["if"
                                                              ["some?" "ns-part"]
                                                              ["drop-pkg" "ns-part"]
                                                              "current-ns"]]]
                                                           ["println" "|forced piece:" "that-ns" "stripped-target"]
                                                           ["if"
                                                            ["contains?" "files" "that-ns"]
                                                            ["->"
                                                             "store"
                                                             ["update-in"
                                                              ["[]" ":collection" ":files"]
                                                              ["helper-create-def"
                                                               "that-ns"
                                                               "stripped-target"
                                                               "code-path"
                                                               "focus"]]
                                                             ["update"
                                                              ":writer"
                                                              ["helper-put-path" "that-ns" "stripped-target"]]]
                                                            ["->"
                                                             "store"
                                                             ["update"
                                                              ":notifications"
                                                              ["helper-notify"
                                                               "op-id"
                                                               ["str" "|foreign namespace: " "that-ns"]]]]]]]
                                                         ["let"
                                                          [["that-ns"
                                                            ["drop-pkg"
                                                             ["compute-ns" "stripped-target" "current-ns" "files"]]]
                                                           ["var-part" ["last" ["string/split" "stripped-target" "|/"]]]]
                                                          ["println"
                                                           "|Search result:"
                                                           "that-ns"
                                                           "var-part"
                                                           "current-ns"]
                                                          ["if"
                                                           ["contains-def?" "files" "that-ns" "var-part"]
                                                           ["if"
                                                            ["=" ["[]" "that-ns" ":defs" "var-part"] "code-path"]
                                                            "store"
                                                            ["update"
                                                             "store"
                                                             ":writer"
                                                             ["helper-put-path" "that-ns" "var-part"]]]
                                                           ["->"
                                                            "store"
                                                            ["update"
                                                             ":notifications"
                                                             ["helper-notify"
                                                              "op-id"
                                                              ["str" "|no namespace for: " "stripped-target"]]]]]]]]
                                                       "store"]]]],
                                 "helper-put-path" ["defn"
                                                    "helper-put-path"
                                                    ["ns-part" "name-part"]
                                                    ["fn"
                                                     ["writer"]
                                                     ["->"
                                                      "writer"
                                                      ["update"
                                                       ":stack"
                                                       ["fn"
                                                        ["stack"]
                                                        ["let"
                                                         [["next-pointer" ["inc" [":pointer" "writer"]]]
                                                          ["code-path" ["[]" "ns-part" ":defs" "name-part"]]]
                                                         ["if"
                                                          ["<" ["dec" ["count" "stack"]] "next-pointer"]
                                                          ["conj" "stack" "code-path"]
                                                          ["if"
                                                           ["=" "code-path" ["get" "stack" "next-pointer"]]
                                                           "stack"
                                                           ["conj"
                                                            ["into" ["[]"] ["subvec" "stack" "0" "next-pointer"]]
                                                            "code-path"]]]]]]
                                                      ["update" ":pointer" "inc"]
                                                      ["assoc" ":focus" ["[]"]]]]],
                                 "go-next" ["defn"
                                            "go-next"
                                            ["store" "op-data"]
                                            ["->"
                                             "store"
                                             ["update"
                                              ":writer"
                                              ["fn"
                                               ["writer"]
                                               ["if"
                                                ["<" [":pointer" "writer"] ["dec" ["count" [":stack" "writer"]]]]
                                                ["->" "writer" ["update" ":pointer" "inc"] ["assoc" ":focus" ["[]"]]]
                                                "writer"]]]]],
                                 "dependents" ["defn"
                                               "dependents"
                                               ["store" "op-data" "op-id"]
                                               ["println" "|Dependents:" "op-data"]
                                               ["let"
                                                [["writer" [":writer" "store"]]
                                                 ["stack" [":stack" "writer"]]
                                                 ["pointer" [":pointer" "writer"]]
                                                 ["code-path" ["get" "stack" "pointer"]]
                                                 [["[]" "ns-part" "kind" "extra-name"] "code-path"]
                                                 ["sepal-ir" [":collection" "store"]]
                                                 ["former-stack" ["subvec" "stack" "0" ["inc" "pointer"]]]]
                                                ["case"
                                                 "kind"
                                                 [":defs"
                                                  ["let"
                                                   [["ns-list"
                                                     ["list-dependent-ns"
                                                      "ns-part"
                                                      [":files" "sepal-ir"]
                                                      [":package" "sepal-ir"]]]
                                                    ["ns-list-more" ["cons" "ns-part" "ns-list"]]
                                                    ["new-paths"
                                                     ["->>"
                                                      "ns-list-more"
                                                      ["map"
                                                       ["fn"
                                                        ["ns-name"]
                                                        ["let"
                                                         [["file" ["get-in" "sepal-ir" ["[]" ":files" "ns-name"]]]
                                                          ["some-defs" [":defs" "file"]]
                                                          ["matched-defs"
                                                           ["->>"
                                                            "some-defs"
                                                            ["filter"
                                                             ["fn"
                                                              ["entry"]
                                                              ["let"
                                                               [[["[]" "name-part" "tree"] "entry"]]
                                                               ["--" "println" "|Detecting def:" "ns-name" "name-part"]
                                                               ["tree-contains?" ["subvec" "tree" "2"] "extra-name"]]]]
                                                            ["map"
                                                             ["fn" ["entry"] ["[]" "ns-name" ":defs" ["first" "entry"]]]]]]
                                                          ["proc-matching?"
                                                           ["tree-contains?" [":procs" "file"] "extra-name"]]]
                                                         ["--" "println" "|Trying ns:" "ns-name"]
                                                         ["if"
                                                          "proc-matching?"
                                                          ["cons" ["[]" "ns-name" ":procs"] "matched-defs"]
                                                          "matched-defs"]]]]
                                                      ["filter" ["fn" ["xs"] ["not" ["empty?" "xs"]]]]
                                                      ["apply" "concat"]]]]
                                                   ["println" "|Got new paths:" "new-paths"]
                                                   ["update"
                                                    "store"
                                                    ":writer"
                                                    ["fn"
                                                     ["writer"]
                                                     ["->"
                                                      "writer"
                                                      ["assoc"
                                                       ":stack"
                                                       ["into" ["[]"] ["concat" "former-stack" "new-paths"]]]
                                                      ["assoc"
                                                       ":pointer"
                                                       ["if" ["empty?" "new-paths"] "pointer" ["inc" "pointer"]]]
                                                      ["assoc" ":focus" ["[]"]]]]]]]
                                                 [":ns"
                                                  ["let"
                                                   [["ns-list"
                                                     ["list-dependent-ns"
                                                      "ns-part"
                                                      [":files" "sepal-ir"]
                                                      [":package" "sepal-ir"]]]
                                                    ["new-paths" ["map" ["fn" ["x"] ["[]" "x" ":ns"]] "ns-list"]]]
                                                   ["--" "println" "former-stack" "new-paths" "pointer"]
                                                   ["update"
                                                    "store"
                                                    ":writer"
                                                    ["fn"
                                                     ["writer"]
                                                     ["->"
                                                      "writer"
                                                      ["assoc"
                                                       ":stack"
                                                       ["into" ["[]"] ["concat" "former-stack" "new-paths"]]]
                                                      ["assoc"
                                                       ":pointer"
                                                       ["if" ["empty?" "ns-list"] "pointer" ["inc" "pointer"]]]
                                                      ["assoc" ":focus" ["[]"]]]]]]]
                                                 "store"]]],
                                 "helper-notify" ["defn"
                                                  "helper-notify"
                                                  ["op-id" "data"]
                                                  ["fn"
                                                   ["notifications"]
                                                   ["into" ["[]"] ["cons" ["[]" "op-id" "data"] "notifications"]]]],
                                 "helper-create-def" ["defn"
                                                      "helper-create-def"
                                                      ["ns-part" "name-part" "code-path" "focus"]
                                                      ["fn"
                                                       ["files"]
                                                       ["if"
                                                        ["contains-def?" "files" "ns-part" "name-part"]
                                                        "files"
                                                        ["assoc-in"
                                                         "files"
                                                         ["[]" "ns-part" ":defs" "name-part"]
                                                         ["let"
                                                          [["as-fn?"
                                                            ["and"
                                                             ["not" ["empty?" "focus"]]
                                                             ["zero?" ["last" "focus"]]]]]
                                                          ["if"
                                                           "as-fn?"
                                                           ["let"
                                                            [["expression"
                                                              ["get-in"
                                                               "files"
                                                               ["concat" "code-path" ["butlast" "focus"]]]]]
                                                            ["if"
                                                             [">" ["count" "expression"] "1"]
                                                             ["[]" "|defn" "name-part" ["subvec" "expression" "1"]]
                                                             ["[]" "|defn" "name-part" ["[]"]]]]
                                                           ["[]" "|def" "name-part" ["[]"]]]]]]]],
                                 "point-to" ["defn"
                                             "point-to"
                                             ["store" "op-data" "op-id"]
                                             ["let"
                                              [["pointer" "op-data"]]
                                              ["assoc-in" "store" ["[]" ":writer" ":pointer"] "pointer"]]],
                                 "go-back" ["defn"
                                            "go-back"
                                            ["store" "op-data"]
                                            ["->"
                                             "store"
                                             ["update"
                                              ":writer"
                                              ["fn"
                                               ["writer"]
                                               ["if"
                                                ["pos?" [":pointer" "writer"]]
                                                ["->" "writer" ["update" ":pointer" "dec"] ["assoc" ":focus" ["[]"]]]
                                                "writer"]]]]],
                                 "shift-one" ["defn"
                                              "shift-one"
                                              ["store" "op-data" "op-id"]
                                              ["let"
                                               [["pointer" "op-data"]]
                                               ["update"
                                                "store"
                                                ":writer"
                                                ["fn"
                                                 ["writer"]
                                                 ["->"
                                                  "writer"
                                                  ["update" ":stack" ["fn" ["stack"] ["remove-idx" "stack" "pointer"]]]
                                                  ["update"
                                                   ":pointer"
                                                   ["fn"
                                                    ["pointer"]
                                                    ["if"
                                                     ["=" "pointer" ["dec" ["count" [":stack" "writer"]]]]
                                                     ["dec" "pointer"]
                                                     "pointer"]]]]]]]]},
                          :procs []},
         "util.analyze" {:ns ["ns"
                              "stack-editor.util.analyze"
                              [":require"
                               ["[]" "clojure.string" ":as" "string"]
                               ["[]" "stack-editor.util.detect" ":refer" ["[]" "contains-def?"]]]],
                         :defs {"compute-ns" ["defn"
                                              "compute-ns"
                                              ["piece" "current-ns" "files"]
                                              ["println" "|compute-ns" "piece" "current-ns"]
                                              ["if"
                                               ["string/includes?" "piece" "|/"]
                                               ["let"
                                                [[["[]" "that-ns" "that-value"] ["string/split" "piece" "|/"]]]
                                                ["locate-ns" "that-ns" "current-ns" "files"]]
                                               ["if"
                                                ["contains-def?" "files" "current-ns" "piece"]
                                                "current-ns"
                                                ["locate-ns-by-var" "piece" "current-ns" "files"]]]],
                                "locate-ns" ["defn"
                                             "locate-ns"
                                             ["short-form" "current-ns" "files"]
                                             ["if"
                                              ["nil?" "current-ns"]
                                              "nil"
                                              ["if"
                                               ["contains?" "files" "current-ns"]
                                               ["let"
                                                [["ns-data" ["get-in" "files" ["[]" "current-ns" ":ns"]]]]
                                                ["if"
                                                 ["or" ["nil?" "ns-data"] ["<=" ["count" "ns-data"] "2"]]
                                                 "nil"
                                                 ["let"
                                                  [["required" ["get" "ns-data" "2"]]
                                                   ["rules" ["subvec" "required" "1"]]
                                                   ["matched-rule"
                                                    ["->>"
                                                     "rules"
                                                     ["filter"
                                                      ["fn"
                                                       ["rule"]
                                                       ["println" "|rule" "rule" "short-form"]
                                                       ["and"
                                                        ["=" "|:as" ["get" "rule" "2"]]
                                                        ["=" "short-form" ["get" "rule" "3"]]]]]
                                                     ["first"]]]]
                                                  ["println" "|matched-rule" "matched-rule"]
                                                  ["if" ["some?" "matched-rule"] ["get" "matched-rule" "1"] "nil"]]]]
                                               "nil"]]],
                                "locate-ns-by-var" ["defn"
                                                    "locate-ns-by-var"
                                                    ["short-form" "current-ns" "files"]
                                                    ["println" "|ns by var:" "short-form" "current-ns"]
                                                    ["if"
                                                     ["nil?" "current-ns"]
                                                     "nil"
                                                     ["if"
                                                      ["contains?" "files" "current-ns"]
                                                      ["let"
                                                       [["ns-data" ["get-in" "files" ["[]" "current-ns" ":ns"]]]]
                                                       ["println" "|ns-data:" "ns-data"]
                                                       ["if"
                                                        ["and" ["nil?" "ns-data"] ["<=" ["count" "ns-data"] "2"]]
                                                        "nil"
                                                        ["if"
                                                         [">=" ["count" "ns-data"] "3"]
                                                         ["let"
                                                          [["required" ["get" "ns-data" "2"]]
                                                           ["rules" ["subvec" "required" "1"]]
                                                           ["matched-rule"
                                                            ["->>"
                                                             "rules"
                                                             ["filter"
                                                              ["fn"
                                                               ["rule"]
                                                               ["println"
                                                                "|Search rule:"
                                                                "rule"
                                                                "short-form"
                                                                ["=" "|:refer" ["get" "rule" "1"]]]
                                                               ["and"
                                                                ["=" "|:refer" ["get" "rule" "2"]]
                                                                ["some"
                                                                 ["fn" ["definition"] ["=" "definition" "short-form"]]
                                                                 ["get" "rule" "3"]]]]]
                                                             ["first"]]]]
                                                          ["println" "|rules" "matched-rule"]
                                                          ["if"
                                                           ["some?" "matched-rule"]
                                                           ["get" "matched-rule" "1"]
                                                           "nil"]]
                                                         "nil"]]]
                                                      "nil"]]],
                                "list-dependent-ns" ["defn"
                                                     "list-dependent-ns"
                                                     ["ns-name" "files" "pkg"]
                                                     ["let"
                                                      [["full-ns" ["str" "pkg" "|." "ns-name"]]]
                                                      ["->>"
                                                       "files"
                                                       ["filter"
                                                        ["fn"
                                                         ["entry"]
                                                         ["let"
                                                          [[["[]" "ns-part" "file"] "entry"]
                                                           ["ns-rules"
                                                            ["->>"
                                                             ["get-in" "file" ["[]" ":ns" "2"]]
                                                             "rest"
                                                             ["map" ["fn" ["xs"] ["get" "xs" "1"]]]
                                                             ["into" ["#{}"]]]]]
                                                          ["--" "println" "|Search:" "ns-name" "ns-rules"]
                                                          ["contains?" "ns-rules" "full-ns"]]]]
                                                       ["map" "first"]]]]},
                         :procs []},
         "util" {:ns ["ns" "stack-editor.util"],
                 :defs {"remove-idx" ["defn"
                                      "remove-idx"
                                      ["xs" "idx"]
                                      ["let"
                                       [["xs-size" ["count" "xs"]]]
                                       ["cond"
                                        [["or" [">=" "idx" "xs-size"] ["neg?" "idx"]] "xs"]
                                        [["=" "xs-size" "1"] ["[]"]]
                                        [["zero?" "idx"] ["subvec" "xs" "1"]]
                                        [["=" "idx" ["dec" "xs-size"]] ["subvec" "xs" "0" "idx"]]
                                        [":else"
                                         ["into"
                                          ["[]"]
                                          ["concat" ["subvec" "xs" "0" "idx"] ["subvec" "xs" ["inc" "idx"]]]]]]]],
                        "now!" ["defn" "now!" [] [".now" "js/performance"]]},
                 :procs []},
         "comp.workspace" {:ns ["ns"
                                "stack-editor.comp.workspace"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "stack-editor.comp.hot-corner" ":refer" ["[]" "comp-hot-corner"]]
                                 ["[]" "stack-editor.comp.stack" ":refer" ["[]" "comp-stack"]]
                                 ["[]" "cirru-editor.comp.editor" ":refer" ["[]" "comp-editor"]]
                                 ["[]" "stack-editor.util.keycode" ":as" "keycode"]
                                 ["[]" "stack-editor.util.dom" ":as" "dom"]
                                 ["[]" "stack-editor.style.widget" ":as" "widget"]]],
                           :defs {"update-state" ["defn"
                                                  "update-state"
                                                  ["state" "new-state"]
                                                  ["merge" "state" "new-state"]],
                                  "on-command" ["defn"
                                                "on-command"
                                                ["store"]
                                                ["fn"
                                                 ["snapshot" "dispatch!" "e"]
                                                 ["let"
                                                  [["code" [":key-code" "e"]]
                                                   ["event" [":original-event" "e"]]
                                                   ["command?" ["or" [".-metaKey" "event"] [".-ctrlKey" "event"]]]
                                                   ["shift?" [".-shiftKey" "event"]]]
                                                  ["cond"
                                                   [["=" "code" "keycode/key-d"]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":stack/goto-definition" "shift?"]]]
                                                   [["=" "code" "keycode/key-u"]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":stack/dependents" "nil"]]]
                                                   [["=" "code" "keycode/key-k"]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":stack/go-back" "nil"]]]
                                                   [["=" "code" "keycode/key-j"]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":stack/go-next" "nil"]]]
                                                   [["=" "code" "keycode/key-s"]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":effect/submit" "shift?"]]]
                                                   [["and" "command?" ["=" "code" "keycode/key-p"]]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     [".stopPropagation" "event"]
                                                     ["dispatch!" ":router/toggle-palette" "nil"]
                                                     ["dom/focus-palette!"]]]
                                                   [["and" "command?" ["=" "code" "keycode/key-e"]]
                                                    ["do"
                                                     [".preventDefault" "event"]
                                                     ["dispatch!" ":collection/edit-ns" "nil"]]]
                                                   [":else" "nil"]]]]],
                                  "comp-workspace" ["def"
                                                    "comp-workspace"
                                                    ["create-comp" ":workspace" "init-state" "update-state" "render"]],
                                  "on-update" ["defn"
                                               "on-update"
                                               ["snapshot" "dispatch!"]
                                               ["dispatch!" ":collection/write" "snapshot"]],
                                  "style-toolbar" ["def"
                                                   "style-toolbar"
                                                   ["{}"
                                                    [":background-color" ["hsl" "0" "0" "0"]]
                                                    [":justify-content" "|flex-end"]]],
                                  "style-container" ["def"
                                                     "style-container"
                                                     ["{}" [":background-color" ["hsl" "0" "0" "0"]]]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}"
                                                     [":z-index" "999"]
                                                     [":background-color" ["hsl" "0" "0" "0"]]
                                                     [":opacity" "1"]]],
                                  "init-state" ["defn" "init-state" ["&" "args"] ["{}" [":scaled?" "false"]]],
                                  "render" ["defn"
                                            "render"
                                            ["store"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["let"
                                              [["router" [":router" "store"]]
                                               ["writer" [":writer" "store"]]
                                               ["stack" ["get-in" "store" ["[]" ":writer" ":stack"]]]
                                               ["pointer" ["get-in" "store" ["[]" ":writer" ":pointer"]]]
                                               ["code-path" ["get" "stack" "pointer"]]
                                               ["tree"
                                                ["if"
                                                 ["some?" "code-path"]
                                                 ["get-in" "store" ["cons" ":collection" ["cons" ":files" "code-path"]]]
                                                 "nil"]]]
                                              ["div"
                                               ["{}" [":style" ["merge" "ui/fullscreen" "ui/row" "style-container"]]]
                                               ["div"
                                                ["{}" [":style" ["merge" "ui/column" "style-sidebar"]]]
                                                ["comp-hot-corner" "router" [":writer" "store"]]
                                                ["comp-stack" "stack" "pointer"]]
                                               ["--" "comp-debug" "writer" "style-debugger"]
                                               ["if"
                                                ["some?" "tree"]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/column" "ui/flex"]]]
                                                 ["comp-editor"
                                                  ["{}"
                                                   [":tree" "tree"]
                                                   [":focus" [":focus" "writer"]]
                                                   [":clipboard" [":clipboard" "writer"]]]
                                                  "on-update"
                                                  ["on-command" "store"]]
                                                 ["div"
                                                  ["{}" [":style" ["merge" "ui/row" "style-toolbar"]]]
                                                  ["div"
                                                   ["{}"
                                                    [":style" "widget/button"]
                                                    [":event" ["{}" [":click" ["on-rename" "code-path"]]]]
                                                    [":attrs" ["{}" [":inner-text" "|Rename"]]]]]
                                                  ["comp-space" "8" "nil"]
                                                  ["div"
                                                   ["{}"
                                                    [":style" "widget/button"]
                                                    [":event" ["{}" [":click" "on-remove"]]]
                                                    [":attrs" ["{}" [":inner-text" "|Remove"]]]]]]]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/column" "ui/flex"]]]
                                                 ["div"
                                                  ["{}" [":style" "style-removed"]]
                                                  ["comp-text" "|Tree is be removed." "nil"]]]]]]]],
                                  "style-sidebar" ["def"
                                                   "style-sidebar"
                                                   ["{}"
                                                    [":width" "|180px"]
                                                    [":background-color" ["hsl" "0" "0" "0"]]
                                                    [":color" ["hsl" "0" "0" "80"]]]],
                                  "on-rename" ["defn"
                                               "on-rename"
                                               ["code-path"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["println" "|the code path:" "code-path"]
                                                ["dispatch!"
                                                 ":modal/mould"
                                                 ["{}" [":title" ":rename-path"] [":data" "code-path"]]]]],
                                  "on-remove" ["defn"
                                               "on-remove"
                                               ["e" "dispatch!"]
                                               ["dispatch!" ":collection/remove-this" "nil"]],
                                  "style-removed" ["def"
                                                   "style-removed"
                                                   ["{}"
                                                    [":margin" "|32px 16px"]
                                                    [":font-size" "|14px"]
                                                    [":font-weight" "|lighter"]
                                                    [":color" ["hsl" "0" "80" "100"]]
                                                    [":background-color" ["hsl" "0" "80" "40"]]
                                                    [":padding" "|0 16px"]
                                                    [":display" "|inline-block"]
                                                    [":max-width" "|400px"]]]},
                           :procs []},
         "comp.graph" {:ns ["ns"
                            "stack-editor.comp.graph"
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]]],
                       :defs {"comp-graph" ["def" "comp-graph" ["create-comp" ":graph" "render"]],
                              "render" ["defn" "render" ["store"] ["fn" ["state" "mutate!"] ["div" ["{}"]]]]},
                       :procs []},
         "schema" {:ns ["ns" "stack-editor.schema"],
                   :defs {"store" ["def"
                                   "store"
                                   ["{}"
                                    [":router"
                                     ["{}" [":name" ":loading"] [":data" ":definitions"] [":show-palette?" "false"]]]
                                    [":collection" ["{}" [":package" "nil"] [":files" ["{}"]]]]
                                    [":writer"
                                     ["{}" [":stack" ["[]"]] [":pointer" "0"] [":focus" ["[]"]] [":clipboard" ["[]"]]]]
                                    [":notifications" ["[]"]]
                                    [":modal-stack" ["[]"]]]]},
                   :procs []},
         "comp.container" {:ns ["ns"
                                "stack-editor.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "stack-editor.comp.loading" ":refer" ["[]" "comp-loading"]]
                                 ["[]" "stack-editor.comp.definitions" ":refer" ["[]" "comp-definitions"]]
                                 ["[]" "stack-editor.comp.workspace" ":refer" ["[]" "comp-workspace"]]
                                 ["[]" "stack-editor.comp.notifications" ":refer" ["[]" "comp-notifications"]]
                                 ["[]" "stack-editor.comp.palette" ":refer" ["[]" "comp-palette"]]
                                 ["[]" "stack-editor.comp.modal-stack" ":refer" ["[]" "comp-modal-stack"]]
                                 ["[]" "stack-editor.util.keycode" ":as" "keycode"]
                                 ["[]" "stack-editor.util.dom" ":as" "dom"]
                                 ["[]" "stack-editor.style.widget" ":as" "widget"]]],
                           :defs {"render" ["defn"
                                            "render"
                                            ["store"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["let"
                                              [["router" [":router" "store"]]]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["merge"
                                                  "ui/global"
                                                  ["{}"
                                                   [":background-color" ["hsl" "0" "0" "0"]]
                                                   [":color" ["hsl" "0" "0" "70"]]]]]
                                                [":attrs" ["{}" [":tab-index" "0"]]]
                                                [":event" ["{}" [":keydown" "on-keydown"]]]]
                                               ["case"
                                                [":name" "router"]
                                                [":loading" ["comp-loading"]]
                                                [":analyzer" ["comp-definitions" [":collection" "store"]]]
                                                [":workspace" ["comp-workspace" "store"]]
                                                ["comp-text" "router" "nil"]]
                                               ["comp-notifications" [":notifications" "store"]]
                                               ["--" "comp-debug" [":stack" [":writer" "store"]] ["{}" [":bottom" "0"]]]
                                               ["if"
                                                [":show-palette?" "router"]
                                                ["comp-palette" [":files" [":collection" "store"]]]]
                                               ["comp-modal-stack" [":modal-stack" "store"]]]]]],
                                  "comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]],
                                  "on-keydown" ["defn" "on-keydown" ["e" "dispatch!"]]},
                           :procs []},
         "comp.modal-stack" {:ns ["ns"
                                  "stack-editor.comp.modal-stack"
                                  [":require"
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                   ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "stack-editor.style.widget" ":as" "widget"]
                                   ["[]" "stack-editor.comp.rename-path" ":refer" ["[]" "comp-rename-path"]]
                                   ["[]" "stack-editor.comp.hydrate" ":refer" ["[]" "comp-hydrate"]]]],
                             :defs {"on-tip" ["defn" "on-tip" ["e" "dispatch!"]],
                                    "style-modal" ["def"
                                                   "style-modal"
                                                   ["merge"
                                                    "ui/center"
                                                    ["{}"
                                                     [":background-color" ["hsl" "0" "0" "0" "0.6"]]
                                                     [":z-index" "900"]
                                                     [":position" ":fixed"]
                                                     [":top" "0"]
                                                     [":right" "0"]
                                                     [":width" "|100%"]
                                                     [":height" "|100%"]]]],
                                    "on-recycle" ["defn"
                                                  "on-recycle"
                                                  ["e" "dispatch!"]
                                                  ["dispatch!" ":modal/recycle" "nil"]],
                                    "renderer" ["defn"
                                                "renderer"
                                                ["kind" "title" "data"]
                                                ["div"
                                                 ["{}"]
                                                 ["case"
                                                  "title"
                                                  [":rename-path" ["comp-rename-path" "data"]]
                                                  [":hydrate" ["comp-hydrate"]]
                                                  ["comp-text" "title" "nil"]]]],
                                    "render" ["defn"
                                              "render"
                                              ["modal-stack"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["div"
                                                ["{}"]
                                                ["->>"
                                                 "modal-stack"
                                                 ["map-indexed"
                                                  ["fn"
                                                   ["idx" "modal"]
                                                   ["let"
                                                    [["kind" [":kind" "modal"]]
                                                     ["title" [":title" "modal"]]
                                                     ["data" [":data" "modal"]]]
                                                    ["[]"
                                                     "idx"
                                                     ["div"
                                                      ["{}"
                                                       [":style" "style-modal"]
                                                       [":event" ["{}" [":click" "on-recycle"]]]]
                                                      ["div"
                                                       ["{}" [":event" ["{}" [":click" "on-tip"]]]]
                                                       ["renderer" "kind" "title" "data"]]]]]]]]]]],
                                    "comp-modal-stack" ["def"
                                                        "comp-modal-stack"
                                                        ["create-comp" ":modal-stack" "render"]]},
                             :procs []},
         "comp.rename-path" {:ns ["ns"
                                  "stack-editor.comp.rename-path"
                                  [":require"
                                   ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "stack-editor.style.widget" ":as" "widget"]]],
                             :defs {"init-state" ["defn"
                                                  "init-state"
                                                  ["code-path"]
                                                  ["let"
                                                   [[["[]" "ns-part" "kind" "extra-name"] "code-path"]]
                                                   ["if"
                                                    ["=" "kind" ":defs"]
                                                    ["str" "ns-part" "|/" "extra-name"]
                                                    "ns-part"]]],
                                    "comp-rename-path" ["def"
                                                        "comp-rename-path"
                                                        ["create-comp"
                                                         ":rename-path"
                                                         "init-state"
                                                         "update-state"
                                                         "render"]],
                                    "update-state" ["defn" "update-state" ["state" "new-text"] "new-text"],
                                    "render" ["defn"
                                              "render"
                                              ["code-path"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["div"
                                                ["{}"]
                                                ["div"
                                                 ["{}"]
                                                 ["comp-text" ["str" "|Rename in " ["first" "code-path"]] "nil"]]
                                                ["div" ["{}"] ["comp-text" ["last" "code-path"] "nil"]]
                                                ["div"
                                                 ["{}"]
                                                 ["input"
                                                  ["{}"
                                                   [":style" ["merge" "ui/input" ["{}" [":width" "400"]]]]
                                                   [":attrs" ["{}" [":value" "state"]]]
                                                   [":event" ["{}" [":input" ["on-input" "mutate!"]]]]]]
                                                 ["comp-space" "16" "nil"]
                                                 ["div"
                                                  ["{}"
                                                   [":style" "widget/button"]
                                                   [":attrs" ["{}" [":inner-text" "|Rename"]]]
                                                   [":event" ["{}" [":click" ["on-rename" "code-path" "state"]]]]]]]]]],
                                    "on-input" ["defn"
                                                "on-input"
                                                ["mutate!"]
                                                ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                    "on-rename" ["defn"
                                                 "on-rename"
                                                 ["code-path" "text"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["println" "|on-rename" "code-path" "text"]
                                                  ["dispatch!" ":collection/rename" ["[]" "code-path" "text"]]
                                                  ["dispatch!" ":modal/recycle" "nil"]]]},
                             :procs []},
         "comp.definitions" {:ns ["ns"
                                  "stack-editor.comp.definitions"
                                  [":require"
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "clojure.string" ":as" "string"]
                                   ["[]" "respo.alias" ":refer" ["create-comp" "div" "input"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                   ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "respo-border.transform.space" ":refer" ["[]" "interpose-spaces"]]
                                   ["[]" "stack-editor.style.widget" ":as" "widget"]
                                   ["[]" "cirru-editor.util.dom" ":refer" ["[]" "focus!"]]
                                   ["[]" "stack-editor.comp.define" ":refer" ["[]" "comp-define"]]
                                   ["[]" "stack-editor.comp.ns-creator" ":refer" ["[]" "comp-ns-creator"]]]],
                             :defs {"style-list" ["def" "style-list" ["{}" [":max-height" "240"] [":overflow" "|auto"]]],
                                    "by-ns-part" ["defn"
                                                  "by-ns-part"
                                                  ["entry"]
                                                  ["let"
                                                   [["path" ["first" "entry"]]
                                                    ["ns-name" ["first" ["string/split" "path" ["re-pattern" "|/"]]]]]
                                                   "ns-name"]],
                                    "comp-definitions" ["def"
                                                        "comp-definitions"
                                                        ["create-comp" ":definitions" "render"]],
                                    "on-edit-definition" ["defn"
                                                          "on-edit-definition"
                                                          ["ns-name" "definition-path"]
                                                          ["fn"
                                                           ["e" "dispatch!"]
                                                           ["dispatch!"
                                                            ":collection/edit"
                                                            ["[]" "ns-name" ":defs" "definition-path"]]
                                                           ["focus!"]]],
                                    "style-file" ["def"
                                                  "style-file"
                                                  ["{}"
                                                   [":display" ":inline-block"]
                                                   [":vertical-align" ":top"]
                                                   [":width" "240"]
                                                   [":margin-top" "16"]]],
                                    "by-var-part" ["defn"
                                                   "by-var-part"
                                                   ["code-entry"]
                                                   ["let"
                                                    [["path" ["first" "code-entry"]]]
                                                    ["last" ["string/split" "path" "|/"]]]],
                                    "render" ["defn"
                                              "render"
                                              ["sepal-data"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["let"
                                                [["files" [":files" "sepal-data"]]]
                                                ["div"
                                                 ["{}"
                                                  [":style"
                                                   ["merge"
                                                    "ui/fullscreen"
                                                    "ui/column"
                                                    "ui/card"
                                                    ["{}" [":background-color" ":black"]]]]]
                                                 ["comp-space" "nil" "|16px"]
                                                 ["comp-ns-creator" [":package" "sepal-data"]]
                                                 ["comp-space" "nil" "|32px"]
                                                 ["div"
                                                  ["{}"
                                                   [":style"
                                                    ["merge"
                                                     "ui/flex"
                                                     ["{}" [":overflow" "|auto"] [":padding-bottom" "200"]]]]]
                                                  ["->>"
                                                   "files"
                                                   ["sort-by" "first"]
                                                   ["map"
                                                    ["fn"
                                                     ["entry"]
                                                     ["let"
                                                      [["ns-name" ["first" "entry"]]
                                                       ["def-codes" [":defs" ["val" "entry"]]]]
                                                      ["[]"
                                                       "ns-name"
                                                       ["div"
                                                        ["{}" [":style" "style-file"]]
                                                        ["comp-define" "ns-name"]
                                                        ["div"
                                                         ["{}" [":style" "style-list"]]
                                                         ["->>"
                                                          "def-codes"
                                                          ["sort-by" "by-var-part"]
                                                          ["map"
                                                           ["fn"
                                                            ["code-entry"]
                                                            ["let"
                                                             [["path" ["first" "code-entry"]]
                                                              ["var-part"
                                                               ["last" ["string/split" "path" ["re-pattern" "|/"]]]]]
                                                             ["[]"
                                                              "var-part"
                                                              ["div"
                                                               ["{}"
                                                                [":style" "widget/var-entry"]
                                                                [":event"
                                                                 ["{}"
                                                                  [":click" ["on-edit-definition" "ns-name" "path"]]]]
                                                                [":attrs" ["{}" [":inner-text" "var-part"]]]]]]]]]]]]]]]]]]]]]]},
                             :procs []},
         "util.dom" {:ns ["ns" "stack-editor.util.dom"],
                     :defs {"focus-palette!" ["defn"
                                              "focus-palette!"
                                              []
                                              ["js/requestAnimationFrame"
                                               ["fn"
                                                []
                                                ["let"
                                                 [["target" [".querySelector" "js/document" "|#command-palette"]]]
                                                 ["if" ["some?" "target"] [".focus" "target"]]]]]]},
                     :procs []},
         "main" {:ns ["ns"
                      "stack-editor.main"
                      [":require"
                       ["[]"
                        "respo.core"
                        ":refer"
                        ["[]" "render!" "clear-cache!" "render-element" "falsify-stage!" "gc-states!"]]
                       ["[]" "stack-editor.schema" ":as" "schema"]
                       ["[]" "stack-editor.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "stack-editor.updater.core" ":refer" ["[]" "updater"]]
                       ["[]" "stack-editor.util.keycode" ":as" "keycode"]
                       ["[]" "stack-editor.util.dom" ":as" "dom"]
                       ["[]" "stack-editor.util" ":refer" ["[]" "now!"]]
                       ["[]"
                        "stack-editor.actions"
                        ":refer"
                        ["[]" "load-collection!" "submit-collection!" "submit-changes!" "display-code!"]]
                       ["[]" "cirru-editor.util.dom" ":refer" ["[]" "focus!"]]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["--" "println" "|dispatch!" "op" "op-data"]
                                     ["case"
                                      "op"
                                      [":effect/submit"
                                       ["let"
                                        [["shift?" "op-data"] ["sepal-data" [":collection" "@store-ref"]]]
                                        ["if"
                                         "shift?"
                                         ["submit-collection!" "sepal-data" "dispatch!"]
                                         ["submit-changes!" "sepal-data" "dispatch!"]]]]
                                      [":effect/dehydrate" ["display-code!" "@store-ref"]]
                                      [":effect/load" ["load-collection!" "dispatch!" "false"]]
                                      ["let"
                                       [["new-store" ["updater" "@store-ref" "op" "op-data" ["now!"]]]]
                                       ["reset!"
                                        "focus-moved?-ref"
                                        ["not"
                                         ["and"
                                          ["identical?" [":collection" "@store-ref"] [":collection" "new-store"]]
                                          ["identical?" [":writer" "@store-ref"] [":writer" "new-store"]]]]]
                                       ["reset!" "store-ref" "new-store"]]]],
                        "-main!" ["defn"
                                  "-main!"
                                  []
                                  ["enable-console-print!"]
                                  ["if"
                                   ["not" ["empty?" "ssr-stages"]]
                                   ["let"
                                    [["target" [".querySelector" "js/document" "|#app"]]]
                                    ["falsify-stage!"
                                     "target"
                                     ["render-element" ["comp-container" "@store-ref" "ssr-stages"] "states-ref"]
                                     "dispatch!"]]]
                                  ["render-app!"]
                                  ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]]
                                  ["add-watch" "store-ref" ":changes" "render-app!"]
                                  ["add-watch" "states-ref" ":changes" "render-app!"]
                                  [".addEventListener"
                                   "js/window"
                                   "|keydown"
                                   ["fn"
                                    ["event"]
                                    ["let"
                                     [["code" [".-keyCode" "event"]]
                                      ["command?" ["or" [".-metaKey" "event"] [".-ctrlKey" "event"]]]
                                      ["shift?" [".-shiftKey" "event"]]]
                                     ["cond"
                                      [["and" "command?" ["=" "code" "keycode/key-p"]]
                                       ["do"
                                        [".preventDefault" "event"]
                                        [".stopPropagation" "event"]
                                        ["dispatch!" ":router/toggle-palette" "nil"]
                                        ["dom/focus-palette!"]]]
                                      [["and" "shift?" "command?" ["=" "code" "keycode/key-a"]]
                                       ["do"
                                        ["let"
                                         [["router" [":router" "@store-ref"]] ["writer" [":writer" "@store-ref"]]]
                                         ["if"
                                          ["=" [":name" "router"] ":workspace"]
                                          ["dispatch!"
                                           ":router/route"
                                           ["{}" [":name" ":analyzer"] [":data" ":definitions"]]]
                                          ["if"
                                           ["not" ["empty?" [":stack" "writer"]]]
                                           ["dispatch!" ":router/route" ["{}" [":name" ":workspace"] [":data" "nil"]]]]]]]]
                                      [":else" "nil"]]]]]
                                  ["println" "|app started!"]
                                  ["load-collection!" "dispatch!" "true"]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|Code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!"
                                         ["comp-container" "@store-ref" ["#{}" ":shell" ":dynamic"]]
                                         "target"
                                         "dispatch!"
                                         "states-ref"]
                                        ["if"
                                         "@focus-moved?-ref"
                                         ["do" ["reset!" "focus-moved?-ref" "false"] ["focus!"]]]]],
                        "ssr-stages" ["def"
                                      "ssr-stages"
                                      ["let"
                                       [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]]
                                        ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]]
                                       ["read-string" "ssr-markup"]]],
                        "store-ref" ["defonce" "store-ref" ["atom" "schema/store"]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]],
                        "focus-moved?-ref" ["def" "focus-moved?-ref" ["atom" "false"]]},
                 :procs [["set!" "js/window.onload" "-main!"]]},
         "updater.notification" {:ns ["ns" "stack-editor.updater.notification"],
                                 :defs {"add-one" ["defn"
                                                   "add-one"
                                                   ["store" "op-data" "op-id"]
                                                   ["let"
                                                    [["notification" "op-data"]]
                                                    ["->"
                                                     "store"
                                                     ["update"
                                                      ":notifications"
                                                      ["fn"
                                                       ["notifications"]
                                                       ["into"
                                                        ["[]"]
                                                        ["cons"
                                                         ["[]" "op-id" "notification"]
                                                         ["take" "3" "notifications"]]]]]]]],
                                        "remove-since" ["defn"
                                                        "remove-since"
                                                        ["store" "op-data"]
                                                        ["let"
                                                         [["pos" "op-data"]]
                                                         ["->"
                                                          "store"
                                                          ["update"
                                                           ":notifications"
                                                           ["fn" ["notifications"] ["take" "pos" "notifications"]]]]]],
                                        "remove-one" ["defn"
                                                      "remove-one"
                                                      ["store" "op-data"]
                                                      ["let"
                                                       [["notification-id" "op-data"]]
                                                       ["->"
                                                        "store"
                                                        ["update"
                                                         ":notifications"
                                                         ["fn"
                                                          ["notifications"]
                                                          ["filterv"
                                                           ["fn"
                                                            ["notification"]
                                                            ["not=" "notification-id" ["first" "notification"]]]
                                                           "notifications"]]]]]]},
                                 :procs []},
         "comp.define" {:ns ["ns"
                             "stack-editor.comp.define"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "stack-editor.style.widget" ":as" "widget"]
                              ["[]" "stack-editor.util.keycode" ":as" "keycode"]]],
                        :defs {"on-input" ["defn"
                                           "on-input"
                                           ["mutate!"]
                                           ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                               "update-state" ["defn" "update-state" ["state" "text"] "text"],
                               "style-namespace" ["def"
                                                  "style-namespace"
                                                  ["{}" [":display" "|inline-block"] [":cursor" "|pointer"]]],
                               "on-click" ["defn"
                                           "on-click"
                                           ["ns-text"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["dispatch!" ":collection/edit" ["[]" "ns-text" ":ns"]]]],
                               "on-proc" ["defn"
                                          "on-proc"
                                          ["ns-name"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["dispatch!" ":collection/edit" ["[]" "ns-name" ":procs"]]]],
                               "style-ns" ["def"
                                           "style-ns"
                                           ["{}"
                                            [":font-family" "|Source Code Pro,Menlo,monospace"]
                                            [":white-space" ":nowrap"]]],
                               "comp-define" ["def"
                                              "comp-define"
                                              ["create-comp" ":define" "init-state" "update-state" "render"]],
                               "init-state" ["defn" "init-state" ["&" "args"] "|"],
                               "style-proc" ["def"
                                             "style-proc"
                                             ["{}"
                                              [":width" "48"]
                                              [":min-width" "48"]
                                              [":height" "24"]
                                              [":line-height" "|24px"]
                                              [":cursor" ":pointer"]
                                              [":display" ":inline-block"]
                                              [":text-decoration" ":underline"]]],
                               "render" ["defn"
                                         "render"
                                         ["ns-name"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["div"
                                           ["{}"]
                                           ["div"
                                            ["{}"
                                             [":style" "style-namespace"]
                                             [":event" ["{}" [":click" ["on-click" "ns-name"]]]]]
                                            ["comp-text" "ns-name" "style-ns"]
                                            ["comp-space" "16" "nil"]
                                            ["div"
                                             ["{}"
                                              [":style" ["merge" "style-proc"]]
                                              [":event" ["{}" [":click" ["on-proc" "ns-name"]]]]]
                                             ["comp-text" "|proc" "nil"]]]
                                           ["div"
                                            ["{}"]
                                            ["input"
                                             ["{}"
                                              [":style"
                                               ["merge"
                                                ["merge" "widget/input" ["{}" [":width" "|200px"] [":height" "|24px"]]]]]
                                              [":attrs" ["{}" [":value" "state"] [":placeholder" "|"]]]
                                              [":event"
                                               ["{}"
                                                [":input" ["on-input" "mutate!"]]
                                                [":keydown" ["on-keydown" "state" "mutate!" "ns-name"]]]]]]]]]],
                               "on-keydown" ["defn"
                                             "on-keydown"
                                             ["text" "mutate!" "ns-name"]
                                             ["fn"
                                              ["e" "dispatch!"]
                                              ["if"
                                               ["and"
                                                ["=" "keycode/key-enter" [":key-code" "e"]]
                                                ["pos?" ["count" "text"]]]
                                               ["do"
                                                ["mutate!" "|"]
                                                ["dispatch!" ":collection/add-definition" ["[]" "ns-name" "text"]]]]]]},
                        :procs []},
         "comp.palette" {:ns ["ns"
                              "stack-editor.comp.palette"
                              [":require"
                               ["[]" "clojure.string" ":as" "string"]
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                               ["[]" "cirru-editor.util.dom" ":refer" ["[]" "focus!"]]
                               ["[]" "stack-editor.comp.command" ":refer" ["[]" "comp-command"]]
                               ["[]" "stack-editor.util.keycode" ":as" "keycode"]
                               ["[]" "stack-editor.style.widget" ":as" "widget"]
                               ["[]" "stack-editor.util.detect" ":refer" ["[]" "fuzzy-search"]]]],
                         :defs {"on-input" ["defn"
                                            "on-input"
                                            ["mutate!"]
                                            ["fn"
                                             ["e" "dispatch!"]
                                             ["mutate!" ["{}" [":text" [":value" "e"]] [":cursor" "0"]]]]],
                                "handle-command" ["defn"
                                                  "handle-command"
                                                  ["cursor" "commands" "files" "dispatch!"]
                                                  ["let"
                                                   [["command" ["get" ["into" ["[]"] "commands"] "cursor"]]]
                                                   ["println" "|Command" ["pr-str" "command"]]
                                                   ["dispatch!" ":router/toggle-palette" "nil"]
                                                   ["case"
                                                    ["first" "command"]
                                                    [":load" ["dispatch!" ":effect/load" "nil"]]
                                                    [":patch" ["dispatch!" ":effect/submit" "true"]]
                                                    [":dehydrate" ["dispatch!" ":effect/dehydrate" "nil"]]
                                                    [":hydrate"
                                                     ["dispatch!"
                                                      ":modal/mould"
                                                      ["{}" [":title" ":hydrate"] [":data" "nil"]]]]
                                                    [":defs"
                                                     ["do"
                                                      ["dispatch!"
                                                       ":collection/edit"
                                                       ["[]" ["get" "command" "1"] ":defs" ["last" "command"]]]]]
                                                    [":ns"
                                                     ["do"
                                                      ["dispatch!" ":collection/edit" ["[]" ["last" "command"] ":ns"]]]]
                                                    [":procs"
                                                     ["do"
                                                      ["dispatch!"
                                                       ":collection/edit"
                                                       ["[]" ["last" "command"] ":procs"]]]]
                                                    "nil"]]],
                                "update-state" ["def" "update-state" "merge"],
                                "comp-palette" ["def"
                                                "comp-palette"
                                                ["create-comp" ":palette" "init-state" "update-state" "render"]],
                                "style-container" ["def"
                                                   "style-container"
                                                   ["{}"
                                                    [":position" "|fixed"]
                                                    [":background-color" ["hsl" "200" "40" "10" "0.8"]]
                                                    [":justify-content" "|center"]]],
                                "on-select" ["defn"
                                             "on-select"
                                             ["cursor" "commands" "files"]
                                             ["fn"
                                              ["dispatch!"]
                                              ["handle-command" "cursor" "commands" "files" "dispatch!"]]],
                                "init-state" ["defn" "init-state" ["&" "args"] ["{}" [":text" "|"] [":cursor" "0"]]],
                                "render" ["defn"
                                          "render"
                                          ["files"]
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["let"
                                            [["ns-names"
                                              ["->>" ["keys" "files"] ["map" ["fn" ["path"] ["[]" ":ns" "path"]]]]]
                                             ["def-paths"
                                              ["->>"
                                               "files"
                                               ["map"
                                                ["fn"
                                                 ["entry"]
                                                 ["let"
                                                  [[["[]" "ns-part" "tree"] "entry"]]
                                                  ["->>"
                                                   [":defs" "tree"]
                                                   ["keys"]
                                                   ["map" ["fn" ["def-name"] ["[]" ":defs" "ns-part" "def-name"]]]]]]]
                                               ["apply" "concat"]]]
                                             ["procedure-names"
                                              ["->>"
                                               ["keys" "files"]
                                               ["map" ["fn" ["proc-name"] ["[]" ":procs" "proc-name"]]]]]
                                             ["queries" ["string/split" [":text" "state"] "| "]]
                                             ["commands"
                                              ["->>"
                                               ["concat" "def-paths" "ns-names" "procedure-names" "basic-commands"]
                                               ["filter" ["fn" ["command"] ["fuzzy-search" "command" "queries"]]]]]]
                                            ["div"
                                             ["{}" [":style" ["merge" "ui/fullscreen" "ui/row" "style-container"]]]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "ui/column"
                                                 ["{}"
                                                  [":background-color" ["hsl" "0" "0" "0" "0.8"]]
                                                  [":width" "|800px"]]]]]
                                              ["input"
                                               ["{}"
                                                [":style"
                                                 ["merge"
                                                  "widget/input"
                                                  ["{}" [":width" "|100%"] [":line-height" "|40px"]]]]
                                                [":attrs"
                                                 ["{}"
                                                  [":placeholder" "|write command..."]
                                                  [":id" "|command-palette"]
                                                  [":value" [":text" "state"]]]]
                                                [":event"
                                                 ["{}"
                                                  [":input" ["on-input" "mutate!"]]
                                                  [":keydown"
                                                   ["on-keydown" "mutate!" "commands" [":cursor" "state"] "files"]]]]]]
                                              ["div"
                                               ["{}" [":style" ["merge" "ui/flex" ["{}" [":overflow" "|auto"]]]]]
                                               ["->>"
                                                "commands"
                                                ["map-indexed"
                                                 ["fn"
                                                  ["idx" "command"]
                                                  ["[]"
                                                   "idx"
                                                   ["comp-command"
                                                    "command"
                                                    ["=" "idx" [":cursor" "state"]]
                                                    ["on-select" "idx" "commands" "files"]]]]]]]]]]]],
                                "basic-commands" ["def"
                                                  "basic-commands"
                                                  ["[]"
                                                   ["[]" ":save"]
                                                   ["[]" ":load"]
                                                   ["[]" ":hydrate"]
                                                   ["[]" ":dehydrate"]]],
                                "on-keydown" ["defn"
                                              "on-keydown"
                                              ["mutate!" "commands" "cursor" "collection"]
                                              ["fn"
                                               ["e" "dispatch!"]
                                               ["let"
                                                [["code" [":key-code" "e"]] ["total" ["count" "commands"]]]
                                                ["cond"
                                                 [["=" "code" "keycode/key-esc"]
                                                  ["do"
                                                   ["mutate!" ["{}" [":text" "|"]]]
                                                   ["dispatch!" ":router/toggle-palette" "nil"]
                                                   ["focus!"]]]
                                                 [["=" "code" "keycode/key-down"]
                                                  ["if"
                                                   ["<" "cursor" ["dec" "total"]]
                                                   ["mutate!" ["{}" [":cursor" ["inc" "cursor"]]]]]]
                                                 [["=" "code" "keycode/key-up"]
                                                  ["if"
                                                   [">" "cursor" "0"]
                                                   ["mutate!" ["{}" [":cursor" ["dec" "cursor"]]]]]]
                                                 [["=" "code" "keycode/key-enter"]
                                                  ["do"
                                                   ["mutate!" ["{}" [":text" "|"]]]
                                                   ["handle-command" "cursor" "commands" "collection" "dispatch!"]]]
                                                 [":else" "nil"]]]]]},
                         :procs []},
         "comp.ns-creator" {:ns ["ns"
                                 "stack-editor.comp.ns-creator"
                                 [":require"
                                  ["[]" "clojure.string" ":as" "string"]
                                  ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input"]]
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                  ["[]" "stack-editor.style.widget" ":as" "widget"]]],
                            :defs {"render" ["defn"
                                             "render"
                                             ["pkg"]
                                             ["fn"
                                              ["state" "mutate!"]
                                              ["div"
                                               ["{}"]
                                               ["input"
                                                ["{}"
                                                 [":style" "widget/input"]
                                                 [":event"
                                                  ["{}"
                                                   [":input" ["on-input" "mutate!"]]
                                                   [":keydown" ["on-keydown" "state" "mutate!"]]]]
                                                 [":attrs"
                                                  ["{}" [":value" "state"] [":placeholder" ["str" "pkg" "|."]]]]]]
                                               ["comp-space" "|8px" "nil"]
                                               ["div"
                                                ["{}"
                                                 [":style" "widget/button"]
                                                 [":event" ["{}" [":click" ["on-click" "state" "mutate!"]]]]]
                                                ["comp-text" "|add" "nil"]]]]],
                                   "update-state" ["defn" "update-state" ["state" "text"] "text"],
                                   "on-click" ["defn"
                                               "on-click"
                                               ["state" "mutate!"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["if"
                                                 ["not" ["string/blank?" "state"]]
                                                 ["do"
                                                  ["dispatch!" ":collection/add-namespace" "state"]
                                                  ["mutate!" "|"]]]]],
                                   "on-input" ["defn"
                                               "on-input"
                                               ["mutate!"]
                                               ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                   "comp-ns-creator" ["def"
                                                      "comp-ns-creator"
                                                      ["create-comp" ":ns-creator" "init-state" "update-state" "render"]],
                                   "init-state" ["defn" "init-state" ["pkg"] "|"],
                                   "on-keydown" ["defn"
                                                 "on-keydown"
                                                 ["state" "mutate!"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["if"
                                                   ["and"
                                                    ["=" "13" [":key-code" "e"]]
                                                    ["not" ["string/blank?" "state"]]]
                                                   ["do"
                                                    ["dispatch!" ":collection/add-namespace" "state"]
                                                    ["mutate!" "|"]]]]]},
                            :procs []},
         "updater.core" {:ns ["ns"
                              "stack-editor.updater.core"
                              [":require"
                               ["[]" "stack-editor.updater.router" ":as" "router"]
                               ["[]" "stack-editor.updater.collection" ":as" "collection"]
                               ["[]" "stack-editor.updater.notification" ":as" "notification"]
                               ["[]" "stack-editor.updater.stack" ":as" "stack"]
                               ["[]" "stack-editor.updater.modal" ":as" "modal"]]],
                         :defs {"updater" ["defn"
                                           "updater"
                                           ["store" "op" "op-data" "op-id"]
                                           ["let"
                                            [["handler"
                                              ["case"
                                               "op"
                                               [":router/route" "router/route"]
                                               [":router/toggle-palette" "router/toggle-palette"]
                                               [":collection/add-definition" "collection/add-definition"]
                                               [":collection/add-namespace" "collection/add-namespace"]
                                               [":collection/edit" "collection/edit"]
                                               [":collection/edit-ns" "collection/edit-ns"]
                                               [":collection/write" "collection/write-code"]
                                               [":collection/load" "collection/load-remote"]
                                               [":collection/remove-this" "collection/remove-this"]
                                               [":collection/rename" "collection/rename"]
                                               [":collection/hydrate" "collection/hydrate"]
                                               [":notification/add-one" "notification/add-one"]
                                               [":notification/remove-one" "notification/remove-one"]
                                               [":notification/remove-since" "notification/remove-since"]
                                               [":stack/goto-definition" "stack/goto-definition"]
                                               [":stack/dependents" "stack/dependents"]
                                               [":stack/go-back" "stack/go-back"]
                                               [":stack/go-next" "stack/go-next"]
                                               [":stack/point-to" "stack/point-to"]
                                               [":stack/collapse" "stack/collapse"]
                                               [":stack/shift" "stack/shift-one"]
                                               [":modal/mould" "modal/mould"]
                                               [":modal/recycle" "modal/recycle"]
                                               "default-handler"]]]
                                            ["handler" "store" "op-data" "op-id"]]],
                                "default-handler" ["defn" "default-handler" ["store" "op-data"] "store"]},
                         :procs []},
         "comp.stack" {:ns ["ns"
                            "stack-editor.comp.stack"
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "clojure.string" ":as" "string"]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                             ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                             ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]]],
                       :defs {"style-ns" ["def"
                                          "style-ns"
                                          ["{}"
                                           [":font-size" "|11px"]
                                           [":line-height" "1.4"]
                                           [":color" ["hsl" "0" "0" "50"]]
                                           [":font-family" "|Hind"]]],
                              "style-bright" ["def" "style-bright" ["{}" [":color" ["hsl" "0" "0" "90"]]]],
                              "render" ["defn"
                                        "render"
                                        ["stack" "pointer"]
                                        ["fn"
                                         ["state" "mutate!"]
                                         ["div"
                                          ["{}" [":style" ["merge" "ui/flex" "style-container"]]]
                                          ["->>"
                                           "stack"
                                           ["map-indexed"
                                            ["fn"
                                             ["idx" "item"]
                                             ["[]"
                                              "idx"
                                              ["let"
                                               [[["[]" "ns-part" "kind" "extra-name"] "item"]]
                                               ["if"
                                                ["=" "kind" ":defs"]
                                                ["div"
                                                 ["{}"
                                                  [":style" "style-bar"]
                                                  [":event" ["{}" [":click" ["on-click" "idx"]]]]]
                                                 ["div"
                                                  ["{}" [":style" ["if" ["=" "idx" "pointer"] "style-bright"]]]
                                                  ["comp-text" "extra-name" "nil"]]
                                                 ["div" ["{}" [":style" "style-ns"]] ["comp-text" "ns-part" "nil"]]]
                                                ["div"
                                                 ["{}"
                                                  [":style"
                                                   ["merge" "style-ns-main" ["if" ["=" "idx" "pointer"] "style-bright"]]]
                                                  [":event" ["{}" [":click" ["on-click" "idx"]]]]]
                                                 ["comp-text" "ns-part" "nil"]]]]]]]]]]],
                              "style-ns-main" ["def"
                                               "style-ns-main"
                                               ["{}"
                                                [":padding" "|0 8px"]
                                                [":line-height" "|36px"]
                                                [":cursor" "|pointer"]
                                                [":color" ["hsl" "0" "0" "60"]]
                                                [":font-family" "|Hind"]
                                                [":font-size" "|13px"]
                                                [":white-space" "|nowrap"]]],
                              "on-click" ["defn"
                                          "on-click"
                                          ["pointer"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["let"
                                            [["event" [":original-event" "e"]]
                                             ["command?" ["or" [".-ctrlKey" "event"] [".-metaKey" "event"]]]
                                             ["shift?" [".-shiftKey" "event"]]]
                                            ["cond"
                                             ["command?" ["dispatch!" ":stack/collapse" "pointer"]]
                                             ["shift?"
                                              ["do" [".preventDefault" "event"] ["dispatch!" ":stack/shift" "pointer"]]]
                                             [":else" ["do" ["dispatch!" ":stack/point-to" "pointer"]]]]]]],
                              "style-container" ["def"
                                                 "style-container"
                                                 ["{}"
                                                  [":overflow" "|auto"]
                                                  [":padding" "|16px 0 160px 0"]
                                                  [":user-select" ":nonworkspacee"]]],
                              "style-bar" ["def"
                                           "style-bar"
                                           ["{}"
                                            [":padding" "|4px 8px"]
                                            [":cursor" "|pointer"]
                                            [":color" ["hsl" "0" "0" "60"]]
                                            [":font-family" "|Source Code Pro,Menlo,monospace"]
                                            [":font-size" "13"]
                                            [":line-height" "1.4"]
                                            [":white-space" "|nowrap"]]],
                              "comp-stack" ["def" "comp-stack" ["create-comp" ":stack" "render"]]},
                       :procs []},
         "comp.notifications" {:ns ["ns"
                                    "stack-editor.comp.notifications"
                                    [":require"
                                     ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                     ["[]" "respo-ui.style" ":as" "ui"]
                                     ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                                     ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]],
                               :defs {"comp-notifications" ["def"
                                                            "comp-notifications"
                                                            ["create-comp" ":notifications" "render"]],
                                      "render" ["defn"
                                                "render"
                                                ["notifications"]
                                                ["fn"
                                                 ["state" "mutate!"]
                                                 ["div"
                                                  ["{}"]
                                                  ["->>"
                                                   "notifications"
                                                   ["map-indexed"
                                                    ["fn"
                                                     ["idx" "entry"]
                                                     ["[]"
                                                      ["first" "entry"]
                                                      ["div"
                                                       ["{}"
                                                        [":style"
                                                         ["merge"
                                                          "style-notification"
                                                          ["{}" [":top" ["str" ["+" "8" ["*" "40" "idx"]] "|px"]]]]]
                                                        [":event" ["{}" [":click" ["on-click" "idx"]]]]]
                                                       ["comp-text" ["last" "entry"] "nil"]]]]]]]]],
                                      "on-click" ["defn"
                                                  "on-click"
                                                  ["idx"]
                                                  ["fn"
                                                   ["e" "dispatch!"]
                                                   ["dispatch!" ":notification/remove-since" "idx"]]],
                                      "style-notification" ["def"
                                                            "style-notification"
                                                            ["{}"
                                                             [":position" "|fixed"]
                                                             [":top" "|8px"]
                                                             [":right" "|8px"]
                                                             [":transition" "|320ms"]
                                                             [":line-height" "|32px"]
                                                             [":white-space" "|nowrap"]
                                                             [":color" ["hsl" "0" "0" "100"]]
                                                             [":background-color" ["hsl" "300" "30" "70" "0.3"]]
                                                             [":z-index" "999"]
                                                             [":min-width" "|160px"]
                                                             [":padding" "|0 16px"]
                                                             [":cursor" "|pointer"]
                                                             [":border-radius" "|2px"]]]},
                               :procs []},
         "util.querystring" {:ns ["ns"
                                  "stack-editor.util.querystring"
                                  [":require" ["[]" "clojure.string" ":as" "string"]]],
                             :defs {"parse-query" ["defn"
                                                   "parse-query"
                                                   ["search"]
                                                   ["if"
                                                    ["=" "search" "|"]
                                                    ["{}"]
                                                    ["let"
                                                     [["content" ["subs" "search" "1"]]
                                                      ["pairs"
                                                       ["map"
                                                        ["fn" ["piece"] ["string/split" "piece" "|="]]
                                                        ["string/split" "content" "|&"]]]]
                                                     ["into" ["{}"] "pairs"]]]]},
                             :procs []},
         "util.detect" {:ns ["ns" "stack-editor.util.detect" [":require" ["[]" "clojure.string" ":as" "string"]]],
                        :defs {"cirru-vec?" ["defn"
                                             "cirru-vec?"
                                             ["x"]
                                             ["if"
                                              ["vector?" "x"]
                                              ["every?" ["fn" ["y"] ["or" ["string?" "y"] ["cirru-vec?" "y"]]] "x"]
                                              "false"]],
                               "strip-atom" ["defn"
                                             "strip-atom"
                                             ["token"]
                                             ["->"
                                              "token"
                                              ["string/replace" ["re-pattern" "|^@"] "|"]
                                              ["string/replace" ["re-pattern" "|\\.$"] "|"]
                                              ["string/replace" ["re-pattern" "|/@"] "|/"]]],
                               "fuzzy-search" ["defn"
                                               "fuzzy-search"
                                               ["pieces" "queries"]
                                               ["every?"
                                                ["fn"
                                                 ["query"]
                                                 ["some"
                                                  ["fn" ["piece"] ["string/includes?" ["str" "piece"] "query"]]
                                                  "pieces"]]
                                                "queries"]],
                               "contains-def?" ["defn"
                                                "contains-def?"
                                                ["files" "ns-part" "name-part"]
                                                ["println" "|Contains def:" "ns-part" "name-part"]
                                                ["if"
                                                 ["contains?" "files" "ns-part"]
                                                 ["let"
                                                  [["dict" ["get-in" "files" ["[]" "ns-part" ":defs"]]]]
                                                  ["contains?" "dict" "name-part"]]
                                                 "false"]],
                               "tree-contains?" ["defn"
                                                 "tree-contains?"
                                                 ["tree" "x"]
                                                 ["if"
                                                  ["string?" "tree"]
                                                  ["=" "tree" "x"]
                                                  ["if"
                                                   ["empty?" "tree"]
                                                   "false"
                                                   ["let"
                                                    [["cursor" ["first" "tree"]]
                                                     ["at-head?" ["tree-contains?" "cursor" "x"]]]
                                                    ["if" "at-head?" "true" ["recur" ["rest" "tree"] "x"]]]]]]},
                        :procs []},
         "updater.modal" {:ns ["ns" "stack-editor.updater.modal"],
                          :defs {"mould" ["defn"
                                          "mould"
                                          ["store" "op-data" "op-id"]
                                          ["let"
                                           [["modal" "op-data"]]
                                           ["update" "store" ":modal-stack" ["fn" ["stack"] ["conj" "stack" "modal"]]]]],
                                 "recycle" ["defn"
                                            "recycle"
                                            ["store" "op-data" "op-id"]
                                            ["update"
                                             "store"
                                             ":modal-stack"
                                             ["fn" ["stack"] ["into" ["[]"] ["butlast" "stack"]]]]]},
                          :procs []},
         "comp.hydrate" {:ns ["ns"
                              "stack-editor.comp.hydrate"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "textarea" "button"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "stack-editor.style.widget" ":as" "widget"]
                               ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                               ["[]" "stack-editor.util.detect" ":refer" ["[]" "cirru-vec?"]]]],
                         :defs {"update-state" ["defn" "update-state" ["state" "text"] "text"],
                                "style-textarea" ["def"
                                                  "style-textarea"
                                                  ["{}"
                                                   [":background-color" ["hsl" "0" "0" "100" "0.2"]]
                                                   [":font-family" "|Source Code Pro, Menlo"]
                                                   [":color" ":white"]
                                                   [":resize" ":none"]
                                                   [":width" "640"]
                                                   [":height" "200"]
                                                   [":line-height" "|24px"]]],
                                "style-hint" ["def" "style-hint" ["{}" [":font-family" "|Hind"]]],
                                "style-toolbar" ["def" "style-toolbar" ["{}" [":justify-content" ":flex-end"]]],
                                "on-change" ["defn"
                                             "on-change"
                                             ["mutate!"]
                                             ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                "init-state" ["defn" "init-state" ["&" "args"] "|"],
                                "comp-hydrate" ["def"
                                                "comp-hydrate"
                                                ["create-comp" ":hydrate" "init-state" "update-state" "render"]],
                                "render" ["defn"
                                          "render"
                                          []
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["div"
                                            ["{}"]
                                            ["div"
                                             ["{}" [":style" "style-hint"]]
                                             ["comp-text" "|EDN Cirru code to hydrate:" "nil"]]
                                            ["div"
                                             ["{}"]
                                             ["textarea"
                                              ["{}"
                                               [":style" ["merge" "ui/textarea" "style-textarea"]]
                                               [":attrs" ["{}" [":value" "state"]]]
                                               [":event" ["{}" [":input" ["on-change" "mutate!"]]]]]]]
                                            ["comp-space" "nil" "8"]
                                            ["div"
                                             ["{}" [":style" ["merge" "ui/row" "style-toolbar"]]]
                                             ["button"
                                              ["{}"
                                               [":style" "widget/button"]
                                               [":event" ["{}" [":click" ["on-hydrate" "state"]]]]]
                                              ["comp-text" "|Hydrate" "nil"]]]]]],
                                "on-hydrate" ["defn"
                                              "on-hydrate"
                                              ["text"]
                                              ["fn"
                                               ["e" "dispatch!"]
                                               ["let"
                                                [["piece" ["read-string" "text"]]]
                                                ["if"
                                                 ["cirru-vec?" "piece"]
                                                 ["do"
                                                  ["dispatch!" ":collection/hydrate" "piece"]
                                                  ["dispatch!" ":modal/recycle" "nil"]]
                                                 ["dispatch!"
                                                  ":notification/add-one"
                                                  ["str" "|Checking failed: " ["pr-str" "text"]]]]]]]},
                         :procs []},
         "updater.collection" {:ns ["ns"
                                    "stack-editor.updater.collection"
                                    [":require" ["[]" "clojure.string" ":as" "string"]]],
                               :defs {"rename" ["defn"
                                                "rename"
                                                ["store" "op-data" "op-id"]
                                                ["let"
                                                 [[["[]" "code-path" "new-form"] "op-data"]
                                                  [["[]" "ns-part" "kind" "extra-name"] "code-path"]
                                                  ["pointer" ["get-in" "store" ["[]" ":writer" ":pointer"]]]]
                                                 ["case"
                                                  "kind"
                                                  [":ns"
                                                   ["->"
                                                    "store"
                                                    ["update-in"
                                                     ["[]" ":collection" ":files"]
                                                     ["fn"
                                                      ["files"]
                                                      ["->"
                                                       "files"
                                                       ["dissoc" "ns-part"]
                                                       ["assoc" "new-form" ["get" "files" "ns-part"]]]]]
                                                    ["assoc-in"
                                                     ["[]" ":writer" ":stack" "pointer"]
                                                     ["[]" "new-form" "kind"]]]]
                                                  [":defs"
                                                   ["let"
                                                    [[["[]" "new-ns" "new-name"] ["string/split" "new-form" "|/"]]
                                                     ["new-path" ["[]" "new-ns" ":defs" "new-name"]]]
                                                    ["->"
                                                     "store"
                                                     ["update-in"
                                                      ["[]" ":collection" ":files"]
                                                      ["fn"
                                                       ["files"]
                                                       ["if"
                                                        ["=" "new-ns" "ns-part"]
                                                        ["update-in"
                                                         "files"
                                                         ["[]" "ns-part" ":defs"]
                                                         ["fn"
                                                          ["dict"]
                                                          ["->"
                                                           "dict"
                                                           ["dissoc" "extra-name"]
                                                           ["assoc" "new-name" ["get" "dict" "extra-name"]]]]]
                                                        ["->"
                                                         "files"
                                                         ["update-in"
                                                          ["[]" "ns-part" ":defs"]
                                                          ["fn" ["dict"] ["dissoc" "dict" "extra-name"]]]
                                                         ["assoc-in"
                                                          ["[]" "new-ns" ":defs" "new-name"]
                                                          ["get-in" "files" "code-path"]]]]]]
                                                     ["assoc-in" ["[]" ":writer" ":stack" "pointer"] "new-path"]]]]
                                                  ["do" ["println" "|Cannot rename:" "code-path" "new-form"] "store"]]]],
                                      "remove-this" ["defn"
                                                     "remove-this"
                                                     ["store" "op-data" "op-id"]
                                                     ["let"
                                                      [["writer" [":writer" "store"]]
                                                       ["stack" [":stack" "writer"]]
                                                       ["pointer" [":pointer" "writer"]]
                                                       ["path" ["get" "stack" "pointer"]]
                                                       [["[]" "ns-part" "kind" "extra-name"] "path"]]
                                                      ["->"
                                                       "store"
                                                       ["update-in"
                                                        ["[]" ":collection" ":files"]
                                                        ["fn"
                                                         ["files"]
                                                         ["case"
                                                          "kind"
                                                          [":defs"
                                                           ["update-in"
                                                            "files"
                                                            ["[]" "ns-part" ":defs"]
                                                            ["fn" ["defs"] ["dissoc" "defs" "extra-name"]]]]
                                                          [":procs"
                                                           ["assoc-in" "files" ["[]" "ns-part" ":procs"] ["[]"]]]
                                                          [":ns" ["dissoc" "files" "ns-part"]]
                                                          "files"]]]
                                                       ["update-in"
                                                        ["[]" ":writer" ":stack"]
                                                        ["fn"
                                                         ["stack"]
                                                         ["cond"
                                                          [["empty?" "stack"] "stack"]
                                                          [["zero?" "pointer"] ["subvec" "stack" "1"]]
                                                          [["=" ["inc" "pointer"] ["count" "stack"]]
                                                           ["subvec" "stack" "0" ["dec" ["count" "stack"]]]]
                                                          [":else"
                                                           ["into"
                                                            ["[]"]
                                                            ["concat"
                                                             ["subvec" "stack" "0" "pointer"]
                                                             ["subvec" "stack" ["inc" "pointer"]]]]]]]]
                                                       ["update-in"
                                                        ["[]" ":writer" ":pointer"]
                                                        ["fn"
                                                         ["pointer"]
                                                         ["if" ["pos?" "pointer"] ["dec" "pointer"] "pointer"]]]]]],
                                      "write-code" ["defn"
                                                    "write-code"
                                                    ["store" "op-data"]
                                                    ["let"
                                                     [["tree" [":tree" "op-data"]]
                                                      ["focus" [":focus" "op-data"]]
                                                      ["writer" [":writer" "store"]]
                                                      ["stack" [":stack" "writer"]]
                                                      ["pointer" [":pointer" "writer"]]
                                                      ["clipboard" [":clipboard" "op-data"]]]
                                                     ["->"
                                                      "store"
                                                      ["assoc-in" ["[]" ":writer" ":focus"] "focus"]
                                                      ["assoc-in" ["[]" ":writer" ":clipboard"] "clipboard"]
                                                      ["assoc-in"
                                                       ["cons"
                                                        ":collection"
                                                        ["cons" ":files" ["get" "stack" "pointer"]]]
                                                       "tree"]]]],
                                      "hydrate" ["defn"
                                                 "hydrate"
                                                 ["store" "op-data" "op-id"]
                                                 ["let"
                                                  [["writer" [":writer" "store"]]
                                                   ["collection" [":collection" "store"]]
                                                   ["path"
                                                    ["concat"
                                                     ["[]" ":collection"]
                                                     ["get" [":stack" "writer"] [":pointer" "writer"]]
                                                     [":focus" "writer"]]]]
                                                  ["println" "path"]
                                                  ["assoc-in" "store" "path" "op-data"]]],
                                      "edit" ["defn"
                                              "edit"
                                              ["store" "op-data"]
                                              ["let"
                                               [["path" "op-data"]]
                                               ["->"
                                                "store"
                                                ["update"
                                                 ":writer"
                                                 ["fn"
                                                  ["writer"]
                                                  ["let"
                                                   [["stack" [":stack" "writer"]] ["pos" [".indexOf" "stack" "path"]]]
                                                   ["if"
                                                    ["neg?" "pos"]
                                                    ["->"
                                                     "writer"
                                                     ["assoc" ":focus" ["[]"]]
                                                     ["update"
                                                      ":pointer"
                                                      ["fn" ["p"] ["if" ["empty?" "stack"] "p" ["inc" "p"]]]]
                                                     ["update"
                                                      ":stack"
                                                      ["fn"
                                                       ["stack"]
                                                       ["if"
                                                        ["empty?" "stack"]
                                                        ["[]" "path"]
                                                        ["conj"
                                                         ["subvec" "stack" "0" ["inc" [":pointer" "writer"]]]
                                                         "path"]]]]]
                                                    ["->" "writer" ["assoc" ":focus" ["[]"]] ["assoc" ":pointer" "pos"]]]]]]
                                                ["assoc" ":router" ["{}" [":name" ":workspace"] [":data" "nil"]]]]]],
                                      "add-definition" ["defn"
                                                        "add-definition"
                                                        ["store" "op-data"]
                                                        ["let"
                                                         [[["[]" "that-ns" "that-name"] "op-data"]
                                                          ["path"
                                                           ["[]" ":collection" ":files" "that-ns" ":defs" "that-name"]]
                                                          ["maybe-definition" ["get-in" "store" "path"]]]
                                                         ["if"
                                                          ["some?" "maybe-definition"]
                                                          "store"
                                                          ["assoc-in" "store" "path" ["[]" "|defn" "that-name" ["[]"]]]]]],
                                      "edit-ns" ["defn"
                                                 "edit-ns"
                                                 ["store" "op-data" "op-id"]
                                                 ["let"
                                                  [["writer" [":writer" "store"]]
                                                   ["stack" [":stack" "writer"]]
                                                   ["pointer" [":pointer" "writer"]]
                                                   ["code-path" ["get" "stack" "pointer"]]
                                                   ["pkg" ["get-in" "store" ["[]" ":collection" ":package"]]]]
                                                  ["println" "|Edit ns:" "code-path"]
                                                  ["if"
                                                   ["=" ["last" "code-path"] ":ns"]
                                                   ["let"
                                                    [["guess-ns"
                                                      ["get-in"
                                                       "store"
                                                       ["concat"
                                                        ["[]" ":collection" ":files"]
                                                        "code-path"
                                                        [":focus" "writer"]]]]
                                                     ["ns-name"
                                                      ["if"
                                                       ["some?" "guess-ns"]
                                                       ["string/replace" "guess-ns" ["str" "pkg" "|."] "|"]
                                                       "nil"]]]
                                                    ["if"
                                                     ["and"
                                                      ["some?" "ns-name"]
                                                      ["some?"
                                                       ["get-in" "store" ["[]" ":collection" ":files" "ns-name"]]]]
                                                     ["update"
                                                      "store"
                                                      ":writer"
                                                      ["fn"
                                                       ["writer"]
                                                       ["->"
                                                        "writer"
                                                        ["update" ":pointer" "inc"]
                                                        ["assoc" ":focus" ["[]"]]
                                                        ["update"
                                                         ":stack"
                                                         ["fn"
                                                          ["stack"]
                                                          ["conj"
                                                           ["subvec" "stack" "0" ["inc" "pointer"]]
                                                           ["[]" "ns-name" ":ns"]]]]]]]
                                                     ["update"
                                                      "store"
                                                      ":notifications"
                                                      ["fn"
                                                       ["notifications"]
                                                       ["into"
                                                        ["[]"]
                                                        ["cons"
                                                         ["[]" "op-id" ["str" "|\"" "ns-name" "|\" not found"]]
                                                         "notifications"]]]]]]
                                                   ["let"
                                                    [["ns-part" ["first" "code-path"]]]
                                                    ["update"
                                                     "store"
                                                     ":writer"
                                                     ["fn"
                                                      ["writer"]
                                                      ["->"
                                                       "writer"
                                                       ["update" ":pointer" "inc"]
                                                       ["assoc" ":focus" ["[]"]]
                                                       ["update"
                                                        ":stack"
                                                        ["fn"
                                                         ["stack"]
                                                         ["conj"
                                                          ["subvec" "stack" "0" ["inc" "pointer"]]
                                                          ["[]" "ns-part" ":ns"]]]]]]]]]]],
                                      "load-remote" ["defn"
                                                     "load-remote"
                                                     ["store" "op-data"]
                                                     ["let"
                                                      [["collection" "op-data"]]
                                                      ["--" "println" "|loading:" "collection"]
                                                      ["->"
                                                       "store"
                                                       ["update"
                                                        ":collection"
                                                        ["fn" ["cursor"] ["merge" "cursor" "collection"]]]]]],
                                      "add-namespace" ["defn"
                                                       "add-namespace"
                                                       ["store" "op-data"]
                                                       ["let"
                                                        [["namespace'" "op-data"]
                                                         ["basic-code"
                                                          ["[]"
                                                           "|ns"
                                                           ["str"
                                                            ["get-in" "store" ["[]" ":collection" ":package"]]
                                                            "|."
                                                            "namespace'"]]]]
                                                        ["->"
                                                         "store"
                                                         ["assoc-in"
                                                          ["[]" ":collection" ":files" "namespace'"]
                                                          ["{}" [":ns" "basic-code"] [":defs" ["{}"]] [":procs" ["[]"]]]]]]]},
                               :procs []},
         "comp.hot-corner" {:ns ["ns"
                                 "stack-editor.comp.hot-corner"
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                  ["[]" "respo-ui.style" ":as" "ui"]]],
                            :defs {"comp-hot-corner" ["def" "comp-hot-corner" ["create-comp" ":hot-corner" "render"]],
                                   "on-switch" ["defn"
                                                "on-switch"
                                                ["router" "writer"]
                                                ["fn"
                                                 ["e" "dispatch!"]
                                                 ["if"
                                                  ["=" [":name" "router"] ":workspace"]
                                                  ["dispatch!"
                                                   ":router/route"
                                                   ["{}" [":name" ":analyzer"] [":data" ":definitions"]]]
                                                  ["if"
                                                   ["not" ["empty?" [":stack" "writer"]]]
                                                   ["dispatch!"
                                                    ":router/route"
                                                    ["{}" [":name" ":workspace"] [":data" "nil"]]]]]]],
                                   "render" ["defn"
                                             "render"
                                             ["router" "writer"]
                                             ["fn"
                                              ["state" "mutate!"]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["{}"
                                                  [":font-size" "|24px"]
                                                  [":font-weight" "|300"]
                                                  [":text-align" "|center"]
                                                  [":cursor" "|pointer"]]]
                                                [":event" ["{}" [":click" ["on-switch" "router" "writer"]]]]]
                                               ["comp-text" "|Stack Editor" ["{}" [":font-family" "|Josefin Sans"]]]]]]},
                            :procs []},
         "actions" {:ns ["ns"
                         "stack-editor.actions"
                         [":require"
                          ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                          ["[]" "ajax.core" ":refer" ["[]" "GET" "POST" "PATCH" "json-request-format"]]
                          ["[]" "stack-editor.util.querystring" ":refer" ["[]" "parse-query"]]
                          ["[]" "shallow-diff.diff" ":refer" ["[]" "diff"]]]],
                    :defs {"load-collection!" ["defn"
                                               "load-collection!"
                                               ["dispatch!" "open-analyzer?"]
                                               ["println" ["pr-str" "options"]]
                                               ["GET"
                                                ["str"
                                                 "|http://"
                                                 ["get" "options" "|host"]
                                                 "|:"
                                                 ["get" "options" "|port"]]
                                                ["{}"
                                                 [":handler"
                                                  ["fn"
                                                   ["response"]
                                                   ["let"
                                                    [["sepal-data" ["read-string" "response"]]]
                                                    ["if"
                                                     ["not" ["contains?" "sepal-data" ":package"]]
                                                     ["js/alert" "|Cannot find a :package field"]]
                                                    ["dispatch!" ":collection/load" "sepal-data"]
                                                    ["if"
                                                     "open-analyzer?"
                                                     ["dispatch!"
                                                      ":router/route"
                                                      ["{}" [":name" ":analyzer"] [":data" "nil"]]]]
                                                    ["reset!" "remote-sepal-ref" "sepal-data"]]]]
                                                 [":error-handler"
                                                  ["fn"
                                                   ["error"]
                                                   ["println" "error"]
                                                   ["dispatch!" ":notification/add-one" "|Failed to fetch collection"]]]]]],
                           "submit-changes!" ["defn"
                                              "submit-changes!"
                                              ["collection" "dispatch!"]
                                              ["PATCH"
                                               ["str"
                                                "|http://"
                                                ["get" "options" "|host"]
                                                "|:"
                                                ["get" "options" "|port"]]
                                               ["{}"
                                                [":format" ["json-request-format"]]
                                                [":body" ["pr-str" ["diff" "@remote-sepal-ref" "collection"]]]
                                                [":handler"
                                                 ["fn"
                                                  ["response"]
                                                  ["println" "response"]
                                                  ["dispatch!" ":notification/add-one" "|Patched"]
                                                  ["reset!" "remote-sepal-ref" "collection"]]]
                                                [":error-handler"
                                                 ["fn"
                                                  ["error"]
                                                  ["println" "error"]
                                                  ["if"
                                                   ["zero?" [":status" "error"]]
                                                   ["dispatch!" ":notification/add-one" "|Connection failed!"]
                                                   ["let"
                                                    [["response" ["read-string" [":response" "error"]]]]
                                                    ["dispatch!" ":notification/add-one" [":status" "response"]]]]]]]]],
                           "remote-sepal-ref" ["defonce" "remote-sepal-ref" ["atom" "nil"]],
                           "options" ["def"
                                      "options"
                                      ["merge"
                                       ["{}" ["|port" "|7010"] ["|host" "|localhost"]]
                                       ["parse-query" [".-search" "js/location"]]]],
                           "submit-collection!" ["defn"
                                                 "submit-collection!"
                                                 ["collection" "dispatch!"]
                                                 ["POST"
                                                  ["str"
                                                   "|http://"
                                                   ["get" "options" "|host"]
                                                   "|:"
                                                   ["get" "options" "|port"]]
                                                  ["{}"
                                                   [":format" ["json-request-format"]]
                                                   [":body" ["pr-str" "collection"]]
                                                   [":handler"
                                                    ["fn"
                                                     ["response"]
                                                     ["println" "response"]
                                                     ["dispatch!" ":notification/add-one" "|Saved"]
                                                     ["reset!" "remote-sepal-ref" "collection"]]]
                                                   [":error-handler"
                                                    ["fn"
                                                     ["error"]
                                                     ["println" "error"]
                                                     ["if"
                                                      ["zero?" [":status" "error"]]
                                                      ["dispatch!" ":notification/add-one" "|Connection failed!"]
                                                      ["let"
                                                       [["response" ["read-string" [":response" "error"]]]]
                                                       ["dispatch!" ":notification/add-one" [":status" "response"]]]]]]]]],
                           "display-code!" ["defn"
                                            "display-code!"
                                            ["store"]
                                            ["let"
                                             [["writer" [":writer" "store"]]
                                              ["collection" [":collection" "store"]]
                                              ["path"
                                               ["concat"
                                                ["get" [":stack" "writer"] [":pointer" "writer"]]
                                                [":focus" "writer"]]]
                                              ["tree" ["get-in" "collection" "path"]]]
                                             ["if"
                                              ["some?" "tree"]
                                              ["->"
                                               "js/window"
                                               [".open"]
                                               [".-document"]
                                               [".write" "|<pre><code>" ["pr-str" "tree"] "|</code></pre>"]]]]]},
                    :procs []},
         "style.widget" {:ns ["ns"
                              "stack-editor.style.widget"
                              [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"]]],
                         :defs {"entry-line" ["def" "entry-line" ["merge" "var-entry" ["{}" [":display" "|block"]]]],
                                "clickable-text" ["def" "clickable-text" ["{}" [":text-decoration" ":underline"]]],
                                "input" ["def"
                                         "input"
                                         ["merge"
                                          "ui/input"
                                          ["{}"
                                           [":background-color" ["hsl" "0" "0" "100" "0.14"]]
                                           [":color" ["hsl" "0" "0" "100"]]
                                           [":font-family" "|Source Code Pro,Menlo,monospace"]
                                           [":width" "|320px"]]]],
                                "var-entry" ["def"
                                             "var-entry"
                                             ["{}"
                                              [":color" ["hsl" "0" "0" "80"]]
                                              [":cursor" "|pointer"]
                                              [":font-family" "|Source Code Pro,Menlo,monospace"]
                                              [":font-size" "|14px"]
                                              [":line-height" "|24px"]
                                              [":min-width" "|160px"]]],
                                "entry" ["def"
                                         "entry"
                                         ["{}"
                                          [":display" "|inline-block"]
                                          [":background-color" ["hsl" "200" "10" "40" "0"]]
                                          [":color" ["hsl" "0" "0" "100"]]
                                          [":padding" "|0 8px"]
                                          [":cursor" "|pointer"]
                                          [":margin-bottom" "|8px"]]],
                                "button" ["def"
                                          "button"
                                          ["merge"
                                           "ui/button"
                                           ["{}"
                                            [":background-color" ["hsl" "0" "0" "100" "0.2"]]
                                            [":color" ["hsl" "0" "0" "100" "0.6"]]
                                            [":height" "28"]
                                            [":line-height" "|28px"]]]]},
                         :procs []}}}
